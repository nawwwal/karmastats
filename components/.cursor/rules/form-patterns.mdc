---
description: Form implementation patterns for KARMASTAT statistical calculators using react-hook-form and Zod validation with consistent UX patterns. This rule covers standard form setup with zodResolver integration, form layout standards enforcing maximum two fields per row with mobile-first grid systems, validation patterns for statistical parameters including cross-field validation and refinement logic, error handling with user-friendly messages and calculation safety, form component structure with proper button states and loading indicators, input type optimization with appropriate numeric keyboards and decimal precision, auto-focus management for improved user experience, and integration with the centralized validation system.
globs:
alwaysApply: false
---
# KARMASTAT — Form Implementation Patterns

## Standard Form Setup
```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const FormSchema = z.object({
  significanceLevel: z.number().min(0.01).max(0.10),
  statisticalPower: z.number().min(0.80).max(0.99),
  effectSize: z.number().positive()
});

const form = useForm<z.infer<typeof FormSchema>>({
  resolver: zodResolver(FormSchema),
  defaultValues: {
    significanceLevel: 0.05,
    statisticalPower: 0.80,
    effectSize: 0.5
  }
});
```

## Form Layout Standards
- **Maximum 2 fields per row**: `grid-cols-1 sm:grid-cols-2`
- **Mobile-first**: Single column on mobile, max 2 on desktop
- **Field spacing**: `gap-4` between form elements
- **Button placement**: Full-width on mobile, auto on desktop

## Validation Patterns
```typescript
// Statistical parameter validation
const StatisticalSchema = z.object({
  alpha: z.number().min(0.01).max(0.10)
    .describe("Significance level (α)"),
  power: z.number().min(0.80).max(0.99)
    .describe("Statistical power (1-β)"),
  effectSize: z.number().positive()
    .describe("Expected effect size")
}).refine((data) => {
  return data.alpha < data.power;
}, {
  message: "Significance level must be less than power",
  path: ["alpha"]
});
```

## Error Handling
```typescript
// User-friendly error messages
const onSubmit = (values: z.infer<typeof FormSchema>) => {
  try {
    const results = calculateFunction(values);
    setResults(results);
    setError(null);
  } catch (err) {
    setError(err instanceof Error ? err.message : 'Calculation failed');
  }
};
```

## Form Component Structure
```typescript
<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
    <FormField control={form.control} name="parameter1" />
    <FormField control={form.control} name="parameter2" />
  </div>

  <Button type="submit" disabled={form.formState.isSubmitting}>
    {form.formState.isSubmitting ? 'Calculating...' : 'Calculate'}
  </Button>
</form>
```

## Input Type Optimization
- **Numeric inputs**: `type="number"` with proper `step`, `min`, `max`
- **Mobile keyboards**: Appropriate `inputMode` attributes
- **Decimal precision**: Match statistical requirements
- **Auto-focus**: Strategic focus management for better UX

@lib/validation
@components/ui/form.tsx
