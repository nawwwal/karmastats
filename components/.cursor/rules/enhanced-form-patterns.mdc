---
description: Enhanced form implementation patterns for KARMASTAT statistical calculators with improved UX, larger typography, specialized input variants, and comprehensive validation. This rule covers the enhanced form system built around EnhancedInput and StatisticalFormField components, specialized input variants (percentage, sample-size, number, probability, time, currency) with contextual icons and validation, larger font sizes and improved typography hierarchy for accessibility, contextual placeholders and realistic default values tailored to each calculator type, strict layout constraints with maximum 2 fields per row, comprehensive field-level error highlighting and validation feedback, card-based organization with themed styling, PDF upload integration with parameter extraction, and mobile-first accessibility compliance with proper touch targets and ARIA attributes.
globs:
alwaysApply: false
---
# Enhanced Form Patterns for KARMASTAT Statistical Calculators

## Enhanced Form System Standards

### Core Form Components
Use the enhanced form system built around [enhanced-input.tsx](mdc:components/ui/enhanced-input.tsx) and [enhanced-form-field.tsx](mdc:components/ui/enhanced-form-field.tsx) for all statistical calculator forms.

**Required Components:**
- `EnhancedInput` with specialized variants (percentage, sample-size, number, probability, time, currency)
- `StatisticalFormField` with contextual placeholders and examples
- Pre-configured field components: `PowerField`, `AlphaField`, `PercentageField`, `EffectSizeField`, `AllocationRatioField`

### Font Size and Typography Standards
**CRITICAL**: All form elements must use larger, more readable fonts:
- **Labels**: `text-base font-semibold` (md), `text-lg font-semibold` (lg), `text-sm font-medium` (sm)
- **Inputs**: `h-12 text-base px-4` (md), `h-14 text-lg px-4` (lg), `h-10 text-sm px-3` (sm)
- **Descriptions**: `text-sm text-muted-foreground leading-relaxed`
- **Default size**: Always use `size="md"` unless specifically requiring sm/lg

### Input Variants and Validation
**Specialized Input Types:**
```typescript
// Percentage fields (0-100 with % suffix)
<PercentageField
  control={form.control}
  name="fieldName"
  calculatorType="clinical-trial"
  size="md"
/>

// Sample size fields (positive integers with Users icon)
<SampleSizeField
  control={form.control}
  name="sampleSize"
  calculatorType="diagnostic"
  size="md"
/>

// Statistical power (80-95% recommended)
<PowerField
  control={form.control}
  name="power"
  calculatorType="clinical-trial"
  size="md"
/>
```

### Contextual Placeholders and Defaults
**MUST provide realistic, contextual examples:**
- Clinical trials: "e.g., 60.0 (typical clinical success rate)"
- Diagnostic tests: "e.g., 85.0 (high sensitivity expected)"
- Sample sizes: "e.g., 400 (per treatment arm)"
- Effect sizes: "e.g., 10.0 (clinically meaningful difference)"

**Realistic Default Values by Calculator Type:**
- Clinical trial success rates: Control 60%, Treatment 75%
- Diagnostic accuracy: 85% sensitivity/specificity
- Statistical power: 80% (minimum recommended)
- Alpha level: 5% (standard significance)
- Sample sizes: 400 per arm (clinical), 150 total (diagnostic)

### Layout Constraints and Spacing
**STRICT Layout Rules:**
- **Maximum 2 text fields per row**: Use `grid-cols-1 lg:grid-cols-2 gap-6`
- **Consistent spacing**: `space-y-6` between field groups, `space-y-8` between major sections
- **Card organization**: Group related fields in themed cards with `border-primary/20 bg-primary/10`
- **Mobile-first**: Single column on mobile, 2-column on lg+ screens only

### Form State Management and Validation
**Enhanced Error Handling:**
```typescript
// Field-level error highlighting
const hasError = !!fieldState.error;
className={cn(
  "border-2 hover:border-primary/30 focus:border-primary/50",
  hasError && "border-destructive/50 focus:border-destructive"
)}

// Auto-calculate with default values
React.useEffect(() => {
  if (!results && !error) {
    const timer = setTimeout(() => {
      const defaultData = form.getValues();
      onSubmit(defaultData);
    }, 100);
    return () => clearTimeout(timer);
  }
}, []);
```

### Form Visual Enhancement Standards
**Card-based Organization:**
- Main form card: `shadow-lg border-border bg-card/80 backdrop-blur-sm` (theme-aware background)
- Parameter groups in themed cards: `border-primary/20 bg-gradient-to-br from-primary/5 to-secondary/5`
- Study design parameters: Primary theme coloring
- Calculator-specific sections: Success/warning theme variants
- Implementation details: Warning theme (`border-warning/20 bg-warning/5`)

**Enhanced Visual Hierarchy:**
- Section titles: `text-xl font-semibold`
- Card descriptions: `text-sm text-muted-foreground leading-relaxed`
- Form buttons: `px-12 py-4 text-lg font-semibold h-14` for primary actions

**Theme-Aware Styling:**
- **NEVER use hardcoded colors**: `bg-white`, `bg-black`, `text-black`, etc.
- **Always use CSS custom properties**: `bg-card`, `bg-background`, `text-foreground`, `border-border`
- **Maintain transparency**: Use `/80` opacity for subtle backdrop effects with theme colors

### PDF Upload Integration
**Standardized PDF Parameter Extraction:**
```typescript
// Modern dashed-border drop zone
<Card className="border-2 border-dashed border-muted-foreground/25">
  <CardContent>
    <div className="relative border-2 border-dashed rounded-lg p-6 text-center">
      // Upload interface with file icon and descriptive text
    </div>
  </CardContent>
</Card>

// Parameter extraction patterns by calculator type
const patterns = {
  alpha: [/alpha of ([\d\.]+)/i, /significance level of ([\d\.]+)/i],
  power: [/power of ([\d\.]+)/i, /statistical power of ([\d\.]+)/i],
  // Calculator-specific patterns...
};
```

### Form Accessibility Standards
**WCAG 2.1 AA Compliance:**
- Minimum touch targets: 44px (inputs use h-12 minimum)
- Proper label associations: FormLabel linked to FormControl
- Descriptive help text: Statistical context for complex parameters
- Error announcements: Clear, actionable error messages
- Keyboard navigation: Proper tab order and focus management

### Theme Integration
**Use Centralized Theme System:**
- Primary/secondary colors from [theme.ts](mdc:lib/theme.ts)
- Success/warning/error semantic colors with foreground variants
- Proper light/dark mode support: `dark:bg-primary/20 dark:border-primary/30`
- No hardcoded colors - use CSS custom properties

## Implementation Checklist
- [ ] Replace basic Input with EnhancedInput variants
- [ ] Use pre-configured field components (PowerField, AlphaField, etc.)
- [ ] Implement 2-field-per-row maximum constraint
- [ ] Add contextual placeholders and realistic defaults
- [ ] Apply consistent spacing (space-y-6, space-y-8)
- [ ] Organize fields in themed cards
- [ ] Add PDF upload widget where applicable
- [ ] Implement field-level error highlighting
- [ ] Test auto-calculation with defaults
- [ ] Verify mobile responsiveness and accessibility
