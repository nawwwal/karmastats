---
description: Enhanced Zod validation schema patterns for KARMASTAT statistical calculation libraries, ensuring type safety, proper statistical parameter validation, and improved UX with field-level error handling. This rule establishes enhanced statistical parameter validation schemas with realistic defaults and better error messages, cross-field validation with realistic constraints for clinical trials and diagnostic tests, enhanced sample size validation with safety bounds, comprehensive field-level error handling for enhanced UX with ValidationResult types and FieldError interfaces, enhanced form integration with React Hook Form including real-time validation, realistic default values by calculator type with context-aware configurations, bulletproof number input validation with safeToFixed helper functions, warning systems for non-critical issues, and enhanced schema composition for reusability across different calculator types.
globs:
alwaysApply: false
---
# Enhanced Validation Schema Patterns for KARMASTAT Statistical Calculators

## Enhanced Statistical Parameter Validation
```typescript
import { z } from 'zod';

// Enhanced statistical parameters with realistic defaults and better error messages
const EnhancedStatisticalParametersSchema = z.object({
  // Alpha level as string (form input) converted to number with realistic defaults
  alpha: z.enum(['1', '5', '10'])
    .transform(val => Number(val))
    .refine(val => [1, 5, 10].includes(val), {
      message: "Alpha level must be 1%, 5%, or 10%"
    }),

  // Power as string (form input) converted to number with validation
  power: z.enum(['80', '85', '90', '95'])
    .transform(val => Number(val))
    .refine(val => [80, 85, 90, 95].includes(val), {
      message: "Statistical power must be 80%, 85%, 90%, or 95%"
    }),

  // Effect size with context-specific validation
  effectSize: z.number()
    .positive("Effect size must be positive")
    .finite("Effect size must be finite")
    .max(10, "Effect size seems unrealistically large")
});
```

## Enhanced Cross-Field Validation with Realistic Constraints
```typescript
// Clinical trial validation with logical relationships
const ClinicalTrialValidationSchema = z.object({
  controlRate: z.number().min(0.1).max(99.9, "Rate must be between 0.1% and 99.9%"),
  treatmentRate: z.number().min(0.1).max(99.9, "Rate must be between 0.1% and 99.9%"),
  alpha: z.enum(['1', '5', '10']).transform(val => Number(val)),
  power: z.enum(['80', '85', '90', '95']).transform(val => Number(val)),
  allocationRatio: z.number().positive("Allocation ratio must be positive"),
  dropoutRate: z.number().min(0).max(50, "Dropout rate cannot exceed 50%")
}).refine((data) => data.treatmentRate > data.controlRate, {
  message: "Treatment rate must be greater than control rate for superiority trials",
  path: ["treatmentRate"]
}).refine((data) => (data.treatmentRate - data.controlRate) >= 5, {
  message: "Treatment benefit should be at least 5% for meaningful clinical difference",
  path: ["treatmentRate"]
});
```

## Enhanced Sample Size Validation with Safety Bounds
```typescript
const EnhancedSampleSizeSchema = z.object({
  n1: z.number()
    .int("Sample size must be a whole number")
    .min(5, "Sample size must be at least 5 for valid statistical analysis")
    .max(100000, "Sample size exceeds practical limits"),
  n2: z.number()
    .int("Sample size must be a whole number")
    .min(5, "Sample size must be at least 5 for valid statistical analysis")
    .max(100000, "Sample size exceeds practical limits")
    .optional(),
  ratio: z.number()
    .positive("Allocation ratio must be positive")
    .min(0.1, "Allocation ratio cannot be less than 0.1")
    .max(10, "Allocation ratio cannot exceed 10")
    .default(1)
}).refine((data) => {
  const totalSize = data.n1 + (data.n2 || 0);
  return totalSize <= 200000;
}, {
  message: "Combined sample size exceeds practical limits (200,000)",
  path: ["n1"]
});
```

## Field-Level Error Handling for Enhanced UX
```typescript
// Enhanced error handling with field-specific highlighting
export type ValidationResult<T> = {
  success: true;
  data: T;
  warnings?: string[];
} | {
  success: false;
  errors: FieldError[];
  fieldErrors: Record<string, string>;
};

interface FieldError {
  field: string;
  message: string;
  code: string;
}

// Enhanced calculation wrapper with field-level error mapping
export function validateAndCalculate<T, R>(
  input: unknown,
  schema: z.ZodSchema<T>,
  calculator: (data: T) => R
): ValidationResult<R> {
  try {
    const validated = schema.parse(input);
    const result = calculator(validated);

    // Check for warnings (non-blocking issues)
    const warnings = checkForWarnings(validated);

    return {
      success: true,
      data: result,
      warnings: warnings.length > 0 ? warnings : undefined
    };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const fieldErrors: Record<string, string> = {};
      const errors: FieldError[] = error.issues.map(issue => {
        const field = issue.path[0]?.toString() || 'unknown';
        const message = issue.message;
        fieldErrors[field] = message;

        return {
          field,
          message,
          code: issue.code
        };
      });

      return {
        success: false,
        errors,
        fieldErrors
      };
    }

    return {
      success: false,
      errors: [{ field: 'general', message: 'Validation failed', code: 'unknown' }],
      fieldErrors: { general: 'Validation failed' }
    };
  }
}
```

## Enhanced Form Integration with React Hook Form
```typescript
// Enhanced form setup with field-level error handling
export function useEnhancedForm<T>(schema: z.ZodSchema<T>, defaultValues?: Partial<T>) {
  const form = useForm<T>({
    resolver: zodResolver(schema),
    defaultValues,
    mode: 'onChange', // Real-time validation
  });

  // Enhanced error handling for form fields
  const getFieldError = (fieldName: keyof T) => {
    const error = form.formState.errors[fieldName];
    return error?.message;
  };

  const hasFieldError = (fieldName: keyof T) => {
    return !!form.formState.errors[fieldName];
  };

  // Clear specific field errors
  const clearFieldError = (fieldName: keyof T) => {
    form.clearErrors(fieldName);
  };

  return {
    ...form,
    getFieldError,
    hasFieldError,
    clearFieldError
  };
}
```

## Realistic Default Values by Calculator Type
```typescript
// Context-aware default values
export const getCalculatorDefaults = (calculatorType: string) => {
  const defaults = {
    'clinical-trial': {
      alpha: '5',
      power: '80',
      controlRate: 60,
      treatmentRate: 75,
      allocationRatio: 1,
      dropoutRate: 15
    },
    'diagnostic': {
      alpha: '5',
      power: '80',
      sensitivity: 85,
      specificity: 90,
      prevalence: 15,
      sampleSize: 150
    },
    'comparative': {
      alpha: '5',
      power: '80',
      exposureRate: 20,
      outcomeRate: 15,
      oddsRatio: 2.0,
      sampleSize: 200
    }
  };

  return defaults[calculatorType] || defaults['clinical-trial'];
};
```

## Enhanced Number Input Validation
```typescript
// Bulletproof number handling to prevent NaN errors
export const safeToFixed = (value: unknown, precision: number = 2): string => {
  if (value === null || value === undefined || value === '') return '0';

  const numValue = typeof value === 'string' ? parseFloat(value) : Number(value);

  if (isNaN(numValue) || !isFinite(numValue)) return '0';

  return numValue.toFixed(precision);
};

// Enhanced number validation schema
const SafeNumberSchema = z.union([
  z.number(),
  z.string().transform((val) => {
    if (val === '' || val === null || val === undefined) return 0;
    const num = parseFloat(val);
    if (isNaN(num) || !isFinite(num)) {
      throw new z.ZodError([{
        code: 'custom',
        message: 'Invalid number format',
        path: []
      }]);
    }
    return num;
  })
]);
```

## Warning System for Non-Critical Issues
```typescript
// Warning system for non-blocking issues
function checkForWarnings<T>(data: T): string[] {
  const warnings: string[] = [];

  // Example: Check for unusual parameter combinations
  if ('power' in data && data.power > 90) {
    warnings.push("High statistical power (>90%) may require very large sample sizes");
  }

  if ('alpha' in data && data.alpha === 1) {
    warnings.push("Very low alpha level (1%) increases required sample size significantly");
  }

  return warnings;
}
```

## Enhanced Schema Composition for Reusability
```typescript
// Modular schema components
const BaseFormSchema = z.object({
  alpha: z.enum(['1', '5', '10']).transform(val => Number(val)),
  power: z.enum(['80', '85', '90', '95']).transform(val => Number(val))
});

const SampleSizeExtensionSchema = z.object({
  sampleSize: z.number().min(1).max(100000),
  allocationRatio: z.number().positive().default(1)
});

const DropoutExtensionSchema = z.object({
  dropoutRate: z.number().min(0).max(50).default(15)
});

// Compose schemas for different calculator types
export const ClinicalTrialSchema = BaseFormSchema
  .merge(SampleSizeExtensionSchema)
  .merge(DropoutExtensionSchema)
  .extend({
    controlRate: z.number().min(0.1).max(99.9),
    treatmentRate: z.number().min(0.1).max(99.9)
  });
```

## Implementation Checklist
- [ ] Replace basic Zod schemas with enhanced versions
- [ ] Implement field-level error handling in forms
- [ ] Add realistic default values by calculator type
- [ ] Use safeToFixed helper for all number formatting
- [ ] Implement warning system for non-critical issues
- [ ] Add cross-field validation where appropriate
- [ ] Test number input validation edge cases
- [ ] Verify error messages are user-friendly
- [ ] Implement real-time validation (onChange mode)
- [ ] Add proper TypeScript types for all schemas
