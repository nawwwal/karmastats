---
description: Mathematical safety patterns for KARMASTAT statistical calculations, preventing division by zero, infinite loops, and numerical instability. This rule addresses division by zero protection using safe division utilities and denominator checking, convergence safety in iterative algorithms with maximum iteration limits and tolerance checking, bounds validation for all statistical parameters with appropriate error messages, numerical stability using proven algorithms for correlation calculations and two-pass methods, error boundaries for wrapping dangerous calculations with graceful failure handling, memory management for large statistical datasets with chunked processing, statistical constants safety to prevent magic numbers, and critical monitoring points for known mathematical vulnerabilities in the codebase.
globs:
alwaysApply: false
---
# KARMASTAT â€” Mathematical Safety Standards

## Division by Zero Protection
```typescript
// Critical: Always check denominators
// DANGEROUS: const slope = ssXY / ssXX;
// SAFE:
const slope = ssXX === 0 ? 0 : ssXY / ssXX;

// Better: Use utility function
function safeDivision(numerator: number, denominator: number, fallback = 0): number {
  if (Math.abs(denominator) < Number.EPSILON) {
    return fallback;
  }
  return numerator / denominator;
}
```

## Convergence Safety in Iterative Algorithms
```typescript
// Prevent infinite loops in statistical functions
function betacf(a: number, b: number, x: number, maxIterations = 1000): number {
  let iteration = 0;
  let convergence = false;

  while (!convergence && iteration < maxIterations) {
    // Iteration logic here
    iteration++;

    // Check convergence
    if (Math.abs(currentValue - previousValue) < tolerance) {
      convergence = true;
    }
  }

  if (!convergence) {
    throw new Error(`Beta function failed to converge after ${maxIterations} iterations`);
  }

  return result;
}
```

## Bounds Validation
```typescript
// Validate statistical parameters
function validateStatisticalInput(
  alpha: number,
  power: number,
  effectSize: number
): void {
  if (alpha <= 0 || alpha >= 1) {
    throw new Error(`Alpha must be between 0 and 1, got ${alpha}`);
  }

  if (power <= 0 || power >= 1) {
    throw new Error(`Power must be between 0 and 1, got ${power}`);
  }

  if (effectSize <= 0 || !isFinite(effectSize)) {
    throw new Error(`Effect size must be positive and finite, got ${effectSize}`);
  }
}
```

## Numerical Stability
```typescript
// Use stable algorithms for correlation calculations
function pearsonCorrelation(x: number[], y: number[]): number {
  const n = x.length;
  if (n < 2) throw new Error("Need at least 2 data points");

  // Use numerically stable two-pass algorithm
  const xMean = x.reduce((a, b) => a + b, 0) / n;
  const yMean = y.reduce((a, b) => a + b, 0) / n;

  let numerator = 0;
  let xSumSq = 0;
  let ySumSq = 0;

  for (let i = 0; i < n; i++) {
    const xDiff = x[i] - xMean;
    const yDiff = y[i] - yMean;
    numerator += xDiff * yDiff;
    xSumSq += xDiff * xDiff;
    ySumSq += yDiff * yDiff;
  }

  const denominator = Math.sqrt(xSumSq * ySumSq);
  return safeDivision(numerator, denominator, 0);
}
```

## Error Boundaries for Calculations
```typescript
// Wrap dangerous calculations
export function safeCalculation<T>(
  calculation: () => T,
  errorMessage = "Calculation failed"
): T | { error: string } {
  try {
    const result = calculation();

    // Check for invalid results
    if (typeof result === 'number' && !isFinite(result)) {
      return { error: "Calculation produced invalid number" };
    }

    return result;
  } catch (error) {
    return {
      error: error instanceof Error ? error.message : errorMessage
    };
  }
}
```

## Memory Management for Large Datasets
```typescript
// Handle large statistical datasets efficiently
function processLargeDataset(data: number[]): void {
  const CHUNK_SIZE = 1000;

  if (data.length > 10000) {
    console.warn(`Processing large dataset (${data.length} items)`);
  }

  // Process in chunks to prevent memory issues
  for (let i = 0; i < data.length; i += CHUNK_SIZE) {
    const chunk = data.slice(i, i + CHUNK_SIZE);
    processChunk(chunk);
  }
}
```

## Statistical Constants Safety
```typescript
// Extract constants to prevent magic numbers
export const STATISTICAL_CONSTANTS = {
  MIN_SAMPLE_SIZE: 1,
  MAX_SAMPLE_SIZE: 100000,
  MIN_ALPHA: 0.001,
  MAX_ALPHA: 0.5,
  MIN_POWER: 0.5,
  MAX_POWER: 0.999,
  CONVERGENCE_TOLERANCE: 1e-10,
  MAX_ITERATIONS: 1000
} as const;
```

## Critical Monitoring Points
- `lib/regression.ts:65` - Division by zero in slope calculation
- `lib/math/statistics.ts` - Infinite loops in betacf function
- Family study food database - Memory usage with 200+ items
- Any iterative numerical methods - Convergence safety
