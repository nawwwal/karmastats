---
description: Calculator implementation patterns for KARMASTAT statistical tools, covering page structure, results display, and calculator-specific UX patterns. This rule provides page structure templates using ToolPageWrapper and StatisticalSummary components, results display standards with ModernResultsDisplay and proper metric categorization, calculator categories including sample size calculators and regression analysis tools, navigation patterns with proper breadcrumb implementation, error handling specific to calculation failures with Alert components, calculator-specific features including PDF export and parameter tooltips with statistical explanations, performance considerations for debounced calculations and memoized results, real-time validation with immediate parameter feedback, and mobile optimization with touch-friendly controls and haptic feedback integration.
globs:
alwaysApply: false
---
# KARMASTAT â€” Calculator Implementation Patterns

## Page Structure Template
```typescript
'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { ToolPageWrapper } from '@/components/ui/tool-page-wrapper';
import { StatisticalSummary } from '@/components/ui/statistical-summary';
import { calculate } from '@/lib/[calculator-name]';

export default function CalculatorPage() {
  const [results, setResults] = useState(null);
  const form = useForm({
    resolver: zodResolver(CalculatorSchema),
    defaultValues: { /* sensible defaults */ }
  });

  const onSubmit = (values) => {
    const calculationResults = calculate(values);
    setResults(calculationResults);
  };

  return (
    <ToolPageWrapper title="Calculator Name">
      {/* Form implementation */}
      {results && (
        <StatisticalSummary
          results={results}
          type="calculator-type"
          animated={true}
        />
      )}
    </ToolPageWrapper>
  );
}
```

## Results Display Standards
```typescript
// Use ModernResultsDisplay for calculator results
<ModernResultsDisplay
  title="Sample Size Results"
  metrics={[
    {
      label: "Required Sample Size",
      value: results.sampleSize,
      unit: "participants",
      category: "primary"
    },
    {
      label: "Statistical Power",
      value: results.power,
      format: "percentage",
      category: "secondary"
    }
  ]}
  layout="grid-2"
  animated={true}
/>
```

## Calculator Categories
- **Sample Size Calculators**: `/sample-size/*` routes
- **Regression Analysis**: `/regression` with tabs
- **Disease Modeling**: `/disease-math` with standard/advanced models
- **Family Studies**: `/family-study` with comprehensive assessment

## Navigation Patterns
```typescript
// Use proper breadcrumb navigation
const breadcrumbs = [
  { label: "Calculators", href: "/calculators" },
  { label: "Sample Size", href: "/sample-size" },
  { label: "T-Test", href: "/sample-size/t-test" }
];
```

## Error Handling
```typescript
// Calculator-specific error handling
const [error, setError] = useState<string | null>(null);

const onSubmit = async (values) => {
  try {
    setError(null);
    const results = await calculate(values);
    setResults(results);
  } catch (err) {
    setError(err instanceof Error ? err.message : 'Calculation failed');
  }
};

// Display errors with Alert component
{error && (
  <Alert variant="destructive">
    <AlertCircle className="h-4 w-4" />
    <AlertTitle>Calculation Error</AlertTitle>
    <AlertDescription>{error}</AlertDescription>
  </Alert>
)}
```

## Calculator-Specific Features
- **PDF Export**: Results can be exported to PDF
- **Parameter Tooltips**: Use FieldPopover for statistical explanations
- **Real-time Validation**: Immediate feedback on parameter changes
- **Results Comparison**: Show effect of parameter changes
- **Mobile Optimization**: Touch-friendly controls and haptic feedback

## Performance Considerations
- **Debounced Calculations**: For real-time parameter adjustment
- **Memoized Results**: Cache expensive calculations
- **Lazy Loading**: Load heavy libraries only when needed
- **Error Boundaries**: Graceful handling of calculation failures

@components/ui/tool-page-wrapper.tsx
@components/ui/statistical-summary.tsx
@lib/[calculator-name].ts
