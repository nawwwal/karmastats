---
description: Comprehensive enhanced calculator implementation patterns for KARMASTAT statistical tools, covering modern UX design, enhanced form systems, and sophisticated results display. This rule establishes standards for enhanced page structure with ToolPageWrapper, auto-calculation with realistic default values, enhanced form implementation with specialized field components (PowerField, AlphaField, PercentageField), card-based organization with themed styling, sophisticated results display with double outline effects and proper text alignment, enhanced tab implementation for multi-option calculators, comprehensive field-level error handling and validation, mobile-first design standards with touch-friendly interactions, performance optimization with debounced calculations, and accessibility compliance with proper ARIA attributes and focus management.
globs:
alwaysApply: false
---
# Enhanced Calculator Implementation Patterns for KARMASTAT Statistical Tools

## Enhanced Page Structure with Modern UX
```typescript
'use client';

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { ToolPageWrapper } from '@/components/ui/tool-page-wrapper';
import { EnhancedResultsDisplay } from '@/components/ui/enhanced-results-display';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { EnhancedTabs, EnhancedTabsList, EnhancedTabsTrigger, EnhancedTabsContent } from '@/components/ui/enhanced-tabs';
import {
  PowerField,
  AlphaField,
  PercentageField,
  StatisticalFormField
} from '@/components/ui/enhanced-form-field';
import { calculate } from '@/lib/[calculator-name]';

export default function EnhancedCalculatorPage() {
  const [results, setResults] = useState(null);
  const [error, setError] = useState<string | null>(null);

  const form = useForm({
    resolver: zodResolver(CalculatorSchema),
    defaultValues: {
      // Realistic, context-appropriate defaults
      alpha: '5',
      power: '80',
      // Calculator-specific realistic values
    }
  });

  // Auto-calculate with default values on mount
  React.useEffect(() => {
    if (!results && !error) {
      const timer = setTimeout(() => {
        const defaultData = form.getValues();
        onSubmit(defaultData);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, []);

  const onSubmit = (values) => {
    try {
      setError(null);
      setResults(null);
      const calculationResults = calculate(values);
      setResults(calculationResults);
      form.clearErrors(); // Clear any existing form errors
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <ToolPageWrapper
      title="Calculator Name"
      description="Comprehensive description of calculator purpose and methodology"
      backHref="/"
      backLabel="Calculator Category"
      onReset={() => {
        setResults(null);
        setError(null);
        form.clearErrors();
        form.reset();
      }}
      icon={CalculatorIcon}
      layout="single-column"
    >
      <div className="space-y-8">
        {/* Enhanced Input Form */}
        {renderInputForm()}

        {/* Enhanced Results Display */}
        {results && renderResults()}
      </div>
    </ToolPageWrapper>
  );
}
```

## Enhanced Form Implementation Standards
```typescript
const renderInputForm = () => (
  <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
    <CardContent className="space-y-8 pt-8">
      {/* Error Alert with proper alignment */}
      {error && (
        <Alert className="border-destructive/20 bg-destructive/10 text-left">
          <AlertCircle className="h-4 w-4 text-destructive" />
          <AlertTitle className="text-destructive font-bold text-left">Calculation Error</AlertTitle>
          <AlertDescription className="text-destructive text-left">
            {error}
          </AlertDescription>
        </Alert>
      )}

      {/* PDF Upload Widget (where applicable) */}
      <Card className="border-2 border-dashed border-muted-foreground/25 hover:border-muted-foreground/50 transition-colors">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileUp className="h-5 w-5 text-primary" />
            <span>Import from PDF (Optional)</span>
          </CardTitle>
          <CardDescription>Upload research protocol to auto-extract parameters</CardDescription>
        </CardHeader>
        <CardContent>
          {/* Modern dashed-border drop zone implementation */}
        </CardContent>
      </Card>

      {/* Enhanced Form with Tabs (where applicable) */}
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          {/* Common Parameters Card */}
          <Card className="border-primary/20 bg-gradient-to-br from-primary/5 to-secondary/5">
            <CardHeader>
              <CardTitle className="text-xl">Study Design Parameters</CardTitle>
              <CardDescription>
                Standard statistical parameters for analysis design
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <AlphaField
                  control={form.control}
                  name="alpha"
                  calculatorType="calculator-type"
                  size="md"
                />
                <PowerField
                  control={form.control}
                  name="power"
                  calculatorType="calculator-type"
                  size="md"
                />
              </div>
            </CardContent>
          </Card>

          {/* Calculator-Specific Parameters */}
          <Card className="border-primary/20 bg-primary/10 dark:bg-primary/20 dark:border-primary/30">
            <CardHeader>
              <CardTitle className="text-xl">Calculator-Specific Parameters</CardTitle>
              <CardDescription>
                Parameters specific to this type of statistical analysis
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <PercentageField
                  control={form.control}
                  name="parameter1"
                  label="Parameter Label"
                  description="Contextual description with realistic example"
                  calculatorType="calculator-type"
                  size="md"
                />
                {/* Additional fields following 2-per-row constraint */}
              </div>
            </CardContent>
          </Card>

          {/* Submit Button */}
          <div className="flex justify-center pt-6">
            <Button
              type="submit"
              size="lg"
              className="px-12 py-4 text-lg font-semibold h-14"
            >
              <Calculator className="h-5 w-5 mr-3" />
              Calculate Results
            </Button>
          </div>
        </form>
      </Form>
    </CardContent>
  </Card>
);
```

## Enhanced Results Display with Double Outlines
```typescript
const renderResults = () => (
  <div className="space-y-8">
    <EnhancedResultsDisplay
      title="Calculator Results"
      subtitle="Comprehensive analysis with statistical interpretation"
      results={[
        {
          label: "Primary Result",
          value: results.primaryValue,
          format: "integer" as const,
          category: "primary" as const,
          highlight: true,
          interpretation: "Detailed explanation of the primary result"
        },
        {
          label: "Secondary Result",
          value: results.secondaryValue,
          format: "decimal" as const,
          category: "secondary" as const
        }
      ]}
      interpretation={{
        effectSize: "Statistical interpretation of effect size",
        statisticalSignificance: "Assessment of statistical significance",
        clinicalSignificance: "Clinical relevance and practical implications",
        recommendations: [
          "Actionable recommendation 1",
          "Actionable recommendation 2",
          "Actionable recommendation 3"
        ],
        assumptions: [
          "Statistical assumption 1",
          "Statistical assumption 2",
          "Statistical assumption 3"
        ]
      }}
      visualizations={
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <AdvancedVisualization
            title="Primary Visualization"
            type="pie"
            data={visualizationData}
            insights={[
              {
                key: "Key insight",
                value: "Value",
                significance: "high"
              }
            ]}
          />
        </div>
      }
    />

    {/* Enhanced Results Cards with Double Outlines */}
    <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
      <Card className={cn(
        "border-primary/20 bg-primary/10 dark:bg-primary/20 dark:border-primary/30",
        "ring-1 ring-primary/10 ring-offset-2 dark:ring-primary/5 dark:ring-offset-0",
        "shadow-lg shadow-primary/5 dark:shadow-primary/10"
      )}>
        <CardContent className="pt-6">
          {/* Primary results content */}
        </CardContent>
      </Card>

      <Card className={cn(
        "border-success/20 bg-success/10 dark:bg-success/20 dark:border-success/30",
        "ring-1 ring-success/10 ring-offset-2 dark:ring-success/5 dark:ring-offset-0",
        "shadow-lg shadow-success/5 dark:shadow-success/10"
      )}>
        <CardContent className="pt-6">
          {/* Secondary results content */}
        </CardContent>
      </Card>
    </div>

    {/* Interpretation Cards with Proper Alignment */}
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      <Card className="border-info/20 bg-info/10 dark:bg-info/20">
        <CardContent className="py-6">
          <div className="flex items-start gap-3">
            <div className="flex-shrink-0 mt-1">
              <CheckCircle className="h-5 w-5 text-info" />
            </div>
            <div className="space-y-2 text-left">
              <h4 className="font-semibold text-base text-left">Statistical Significance</h4>
              <p className="text-sm text-muted-foreground leading-relaxed text-left">
                {interpretation.statisticalSignificance}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
      {/* Additional interpretation cards */}
    </div>

    {/* PDF Export Card */}
    <Card className="border-primary/20 bg-gradient-to-r from-primary/5 to-secondary/5">
      <CardContent className="py-6">
        <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
          <div className="space-y-2 text-center sm:text-left">
            <h3 className="font-semibold text-lg">Export Your Results</h3>
            <p className="text-sm text-muted-foreground leading-relaxed">
              Download comprehensive PDF report with calculations and interpretations
            </p>
          </div>
          <Button
            onClick={generatePdf}
            size="lg"
            className="bg-primary hover:bg-primary/90 text-white shadow-lg px-8 py-3 text-base font-semibold shrink-0"
          >
            <Download className="h-5 w-5 mr-3" />
            Download PDF Report
          </Button>
        </div>
      </CardContent>
    </Card>
  </div>
);
```

## Enhanced Tab Implementation (Multi-Calculator Pages)
```typescript
// Use EnhancedTabs for multi-option calculators
<EnhancedTabs value={activeTab} onValueChange={setActiveTab} className="space-y-8">
  <EnhancedTabsList className="grid w-full grid-cols-3" variant="modern">
    <EnhancedTabsTrigger value="option1" variant="modern">
      <div className="flex items-center space-x-2">
        <Icon1 className="h-4 w-4" />
        <span>Option 1</span>
      </div>
    </EnhancedTabsTrigger>
    <EnhancedTabsTrigger value="option2" variant="modern">
      <div className="flex items-center space-x-2">
        <Icon2 className="h-4 w-4" />
        <span>Option 2</span>
      </div>
    </EnhancedTabsTrigger>
    <EnhancedTabsTrigger value="option3" variant="modern">
      <div className="flex items-center space-x-2">
        <Icon3 className="h-4 w-4" />
        <span>Option 3</span>
      </div>
    </EnhancedTabsTrigger>
  </EnhancedTabsList>

  <EnhancedTabsContent value="option1">
    {/* Tab-specific form content */}
  </EnhancedTabsContent>
</EnhancedTabs>
```

## Enhanced Validation and Error Handling
```typescript
// Field-level error highlighting
const hasError = !!fieldState.error;

<StatisticalFormField
  control={form.control}
  name="fieldName"
  fieldType="percentage"
  calculatorType="calculator-type"
  size="md"
  className={cn(
    hasError && "border-destructive/50 focus:border-destructive"
  )}
/>

// Comprehensive error handling in onSubmit
const onSubmit = (data) => {
  try {
    setError(null);
    setResults(null);

    // Validate using enhanced schema
    const validatedData = CalculatorSchema.parse(data);
    const result = calculate(validatedData);

    setResults(result);
    form.clearErrors();
  } catch (err) {
    if (err instanceof z.ZodError) {
      // Set form errors for individual fields
      err.errors.forEach((error) => {
        if (error.path.length > 0) {
          form.setError(error.path[0] as any, {
            type: 'validation',
            message: error.message,
          });
        }
      });
      setError(`Please check the highlighted fields: ${err.errors.map(e => e.message).join(', ')}`);
    } else {
      setError(err.message);
    }
  }
};
```

## Mobile-First Design Standards
```typescript
// Mobile-optimized layout constraints
<div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> // Maximum 2 fields per row
<div className="space-y-6"> // Consistent spacing between sections
<Button size="lg" className="px-12 py-4 text-lg font-semibold h-14"> // Touch-friendly buttons

// Mobile navigation integration
import { BottomNav } from '@/components/mobile/bottom-nav';

// Touch targets minimum 44px
className="h-12 text-base px-4" // Inputs
className="h-14 px-8 py-4" // Buttons
```

## Performance and Accessibility Standards
```typescript
// Debounced real-time calculations
const debouncedCalculate = useCallback(
  debounce((values) => {
    try {
      const result = calculate(values);
      setResults(result);
    } catch (err) {
      // Handle errors silently for real-time updates
    }
  }, 500),
  []
);

// Accessibility enhancements
<div role="region" aria-label="Calculation Results" aria-live="polite">
  {results && <EnhancedResultsDisplay {...resultsProps} />}
</div>

// Focus management
const submitButtonRef = useRef<HTMLButtonElement>(null);
// Focus submit button after form reset
```

## Calculator Categories and Route Structure
- **Sample Size Calculators**: `/sample-size/*` routes with enhanced forms
- **Regression Analysis**: `/regression` with EnhancedTabs implementation
- **Disease Modeling**: `/disease-math` with advanced result visualizations
- **Family Studies**: `/family-study` with comprehensive multi-step forms
- **Diagnostic Tests**: `/sample-size/diagnostic` with PDF upload integration

## Implementation Checklist
- [ ] Use ToolPageWrapper with proper props (title, description, icon, layout)
- [ ] Implement enhanced form system with StatisticalFormField components
- [ ] Add realistic default values with auto-calculation on mount
- [ ] Apply 2-field-per-row maximum constraint consistently
- [ ] Implement field-level error highlighting and validation
- [ ] Use EnhancedResultsDisplay with proper categorization
- [ ] Add double outline effects to result cards
- [ ] Include interpretation cards with proper text alignment
- [ ] Add PDF export functionality where applicable
- [ ] Implement EnhancedTabs for multi-option calculators
- [ ] Ensure mobile responsiveness and touch-friendly design
- [ ] Add proper accessibility attributes and focus management
- [ ] Test all validation scenarios and error handling
- [ ] Verify theme consistency across light/dark modes

@components/ui/tool-page-wrapper.tsx
@components/ui/enhanced-results-display.tsx
@components/ui/enhanced-form-field.tsx
@components/ui/enhanced-tabs.tsx
@lib/[calculator-name].ts
