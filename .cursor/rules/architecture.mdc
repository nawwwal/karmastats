---
description: Core KARMASTAT architecture patterns, tech stack, and fundamental development standards for statistical calculator applications. This rule covers Next.js 15 App Router implementation, TypeScript strict mode requirements, Tailwind CSS styling standards, project structure organization, code quality standards including error handling patterns, mathematical safety protocols for statistical calculations, performance optimization using React 19 features, import conventions for maintainable codebases, and critical safety patterns for division by zero protection and bounds validation in statistical computations.
globs:
alwaysApply: false
---
# KARMASTAT — Core Architecture Standards

## Tech Stack Requirements
- **Framework**: Next.js 15 (App Router, React 19)
- **Language**: TypeScript 5.4+ with strict mode
- **Styling**: Tailwind CSS + shadcn/ui components
- **Validation**: Zod schemas with react-hook-form
- **Testing**: Vitest + Testing Library

## Project Structure Standards
```
├─ app/                   # Next.js App Router
│  ├─ (calc)/            # Calculator routes (grouped)
│  └─ layout.tsx         # Root layout
├─ lib/                  # Backend calculation libraries
├─ components/           # React UI components
│  ├─ ui/               # shadcn/ui + custom
│  └─ [domain]/         # Domain-specific components
└─ .cursor/rules/       # Distributed rule system
```

## Code Quality Standards
- **TypeScript Strict Mode**: Required for all files
- **Error Handling**: Standardize patterns (avoid mixed `{error}`, exceptions, null)
- **Mathematical Safety**: Always check division by zero, bounds validation
- **Performance**: Use React 19 and Next.js 15 optimizations

## Critical Safety Patterns
```typescript
// Division safety example
const slope = ssXX === 0 ? 0 : ssXY / ssXX;

// Bounds checking
if (value < 0 || value > maxValue) {
  throw new Error(`Value must be between 0 and ${maxValue}`);
}
```

## Import Conventions
- Relative imports for same directory
- Absolute imports for cross-domain references
- Group imports: external, internal, relative
